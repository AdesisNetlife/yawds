var fs = require('fs')
var path = require('path')
var ini = require('ini')
var PREFIX = require('./constants').PREFIX

module.exports = {
	echo: echo,
	exit: exit,
	fail: fail,
	each: each,
	exists: exists,
	envPartial: envPartial,
	parseIni: parseIni,
	encodeIni: encodeIni,
	writeIni: writeIni,
	generateBatch: generateBatch,
	generateVars: generateVars
}

function parseIni(filepath) {
	var data
	try {
	  data = ini.parse(fs.readFileSync(path.normalize(filepath), 'utf-8'))
	} catch (e) {
	  fail('Cannot read ini file:', e.message)
	}
	return data
}

function encodeIni(object, section) {
	return ini.stringify(object, section)
}

function writeIni(filepath, object, section) {
	if (fs.existsSync(filepath)) {
		fs.appendFileSync(path.normalize(filepath), ini.stringify(object, section))
	} else {
		fs.writeFileSync(path.normalize(filepath), ini.stringify(object, section))
	}
}

function generateVars(config, subprefix) {
	var variables = []
	subprefix = subprefix ? subprefix + '_' : ''
	
	function addVariable (name, value) {
		if (typeof value === 'boolean') {
			value = value ? '1' : '0'
		} else if (!name || !value) {
			return
		}
		variables.push((PREFIX + '_' + subprefix + name).toUpperCase() + '=' + value)
	}

	each(config, function (name, value, parent) {
		var varName = parent ? parent + '_' + name : name
		if (typeof value === 'object' && value !== null) {
			each(value, arguments.callee, varName)
		} else {
			addVariable(varName, value)
		}
	})
	
	return variables
}

function generateBatch(array) {
	return [ '@ECHO OFF', ':: autogenerated, do not edit manually', '' ]
	.concat(
		array.map(function (statement) {
			return 'SET ' + statement
		})
	)
	.join('\n')
}

function exit(code) {
	process.exit(code || 0)
}

function echo() {
	console.log.apply(null, arguments)
}

function fail() {
	echo.apply(null, arguments)
	exit(1)
}

function each(object, iterator, parent) {
	for (var prop in object) {
		if (object.hasOwnProperty(prop)) {
			iterator(prop, object[prop], parent)
		}
	}
}

function envPartial(prefix) {
	return function (value) {
		return process.env[prefix + '_' + value]
	}
}

function exists(value) {
	if (!value || value === '0') {
		return false
	}
	return true
}